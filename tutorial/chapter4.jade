.step(data-title='Confirm Account Creation', data-file="app/views/users/show.html.erb", data-language='htmlembedded')
  h2 User Story: Confirm Account Creation

  blockquote As a user, I want to view a success page and receive a text message indicating that my account has been created successfully.
  :markdown
    This story completes the account verification use case by indicating to the user that their account has been created and verified successfully. To implement this story, we need to:

    * Display a page that indicates that the user account has been created and verified successfully
    * Send a text message to the user's phone indicating their account has been verified

    Let's begin by looking at the view that shows a user's account details.

.step(data-title="Show User Details Page", data-file="app/views/users/show.html.erb", data-language='htmlembedded')
  :markdown
    ## Show User Details Page

    This simple .erb template displays a user name and let's them know they've been verified.

    Just a reminder that our router is automatically looking for a 'show.html.erb' template to render since we told it to use Resource Routing which automatically creates a `users/show/:id` route.

    This should suffice for confirmation in the browser that the user has been verified. Let's see how we might send that text message next.

.step(data-title='Configuring Twilio', data-file='Gemfile', data-language="ruby", data-highlight='29-33')
  :markdown
    ## Configuring Twilio

    Authy is awesome for abstracting SMS and handling 2FA and account verification, but we can't use it to send arbitrary text messages. Let's use the [Twilio API](/docs/api/rest/sending-sms) directly to do that!

    In order to use the 'twilio-ruby' helper library we just need to include it in our Gemfile.

    But first, we need to configure our Twilio account. We'll need three things:

    * Our Twilio account SID
    * Our Twilio auth token
    * A Twilio number in our account that can send text messages

    Once we've hunted these config variables down we can create an instance function to send a message to the user's phone.

.step(data-title='Sending a Message: Creating a Twilio Client', data-file='app/controllers/users_controller.rb', data-highlight='67-77')
  :markdown
    ## Sending a Message: Using the Twilio Client

    Much as we did for our Authy client, we create a single instance of the Twilio REST API helper, called `@client` in this example.

    Then all we need to do to send an sms is use the built in `messages.create()` to send an SMS to the user's phone. Notice we are combing `country_code` and `phone_number` to make sure we support international numbers.

    Let's finish up in the controller, where we actually use this functionality.

.step(data-title='Sending a Message: Updating the Controller', data-file='app/controllers/users_controller.rb', data-highlight='47-48')
  :markdown
    ## Sending a Message: Updating the Controller

    In the controller, after a new user has been successfully verified, we use `send_message` to deliver them the happy news! 

    ## All Done

    And with that, we've implemented account verification in our Ruby on Rails application! Be sure to check out the project buttons above to download the source for this application, view it on GitHub, or deploy it to Heroku to see it in action for yourself.

    We'd also love to hear your feedback on this tutorial - [please reach out to us](mailto:help@twilio.com) with any questions you might have.  Thanks for checking out the tutorial!