.step(data-title='Sending a One-Time Password')
  :markdown
    ### User Story: Sending a One-Time Password

    <blockquote>As an authentication system, I want to send a one-time password to a user's mobile phone to verify their possession of that phone number.</blockquote>

    This story covers a process that is invisible to the end user but necessary to power our account verification functionality. After a new user is created, the application needs to send a one-time password to that user's phone to validate the number (and the account). Here's what needs to get done:

    * Create and configure an Authy API client
    * Modify the controller to send a one-time password after the user is created

    Let's begin by modifying the app's configuration to contain our Authy API key.

.step(data-title="Configuring Authy", data-file="config/secrets.yml", data-highlight="13-15")
  :markdown
    ### Configuring Authy

    In `secrets.yml`, we list configuration parameters for the application. Most are pulled in from system environment variables, which is a helpful way to access sensitive values (like API keys). This prevents us from accidentally checking them in to source control.

    Now, we need our Authy production key ([sign up for Authy here](https://dashboard.authy.com/signup)). When you create an Authy application, the production key is found on the dashboard:

    ![Authy Dashboard](//s3.amazonaws.com/howtodocs/2fa-authy-dashboard.png)

    Next, we need to jump over to the `UserController` to configure the Authy client and create an instance method to send a one-time password.


.step(data-title='Sending a Token on Account Creation', data-file='app/controllers/users_controller.rb', data-highlight='24-27')
  :markdown
    ### Sending a Token on Account Creation

    Once the user has an `authyId`, we can actually send a verification code to that user's mobile phone. 

    When our user is created successfully via the form we implemented for the last story, we send a token to the user's mobile phone to verify their account in our controller.  When the code is sent, we redirect to another page where the user can enter the token they were sent, completing the verification process.

    Let's check out the code for that next!